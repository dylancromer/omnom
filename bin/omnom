#!/usr/bin/env python3

from __future__ import annotations
import argparse
from tempfile import TemporaryDirectory
from typing import Sequence
from pathlib import Path
import subprocess
from marko.block import Paragraph
from omnom import MarkdownParser, MdCodeBlocks, NomNomlSettings, NomNomMapper, NomNomlCode
from omnom.defaults import DEFAULT_SETTINGS_STRING


DEFAULT_NOMNOML_SETTINGS = NomNomlSettings.new(DEFAULT_SETTINGS_STRING)
NOML_SUFFIX = ".noml"


def _read_markdown(md_path: Path) -> str:
    return md_path.read_text()


def _get_code_blocks(md_string: str) -> MdCodeBlocks:
    md_parser = MarkdownParser()
    return md_parser.get_code_blocks(md_string)


def _nomnoml_to_md_images(nomnoml_blocks: Sequence[NomNomlCode]) -> Sequence[Paragraph]:
    mapper = NomNomMapper()
    return [mapper.nomnoml_to_md_image(nomnoml) for nomnoml in nomnoml_blocks]


def _make_new_markdown_source(source: str, replacements: Sequence[Paragraph]) -> str:
    md_parser = MarkdownParser()
    return md_parser.replace_code_blocks(
        lang="nomnoml",
        replacements=replacements,
        source=source,
    )


def _make_svg_filename(name: str) -> str:
    return "/" + name + NomNomMapper.IMAGE_SUFFIX


def _make_noml_filename(name: str) -> str:
    return "/" + name + NOML_SUFFIX


def _run_nomnoml(noml_path: Path, svg_path: Path) -> None:
    _ = subprocess.run(["npx", "nomnoml", str(noml_path), str(svg_path)], check=True)


def _run_nomnoml_on_all(noml_paths: Sequence[Path], svg_paths: Sequence[Path]) -> None:
    for noml_path, svg_path in zip(noml_paths, svg_paths):
        _run_nomnoml(noml_path=noml_path, svg_path=svg_path)


def _get_pandoc_args(markdown_path: Path, dest_path: Path) -> Sequence[str]:
    return [
        "pandoc",
        str(markdown_path.name),
        "-o",
        str(dest_path.absolute()),
        "--pdf-engine",
        "lualatex",
        "--toc",
    ]


def _run_pandoc_on_md(markdown_path: Path, dest_path: Path) -> None:
    pandoc_args = _get_pandoc_args(
        markdown_path=markdown_path,
        dest_path=dest_path,
    )
    _ = subprocess.run(
        args=pandoc_args,
        check=True,
        cwd=str(markdown_path.parent),
    )


def _write_svg_and_create_pdf(
    md_source: str,
    nomnoml_blocks: Sequence[NomNomlCode],
    dest_path: Path,
) -> None:
    with TemporaryDirectory() as tmpdirname:
        md_path = Path(tmpdirname + "/source.md")
        _ = md_path.write_text(md_source)

        noml_paths = [
            Path(tmpdirname + _make_noml_filename(nomnoml.name)) for nomnoml in nomnoml_blocks
        ]
        for noml_path, noml_block in zip(noml_paths, nomnoml_blocks):
            _ = noml_path.write_text(noml_block.raw)

        svg_paths = [
            Path(tmpdirname + _make_svg_filename(nomnoml.name)) for nomnoml in nomnoml_blocks
        ]

        _run_nomnoml_on_all(noml_paths=noml_paths, svg_paths=svg_paths)

        _run_pandoc_on_md(markdown_path=md_path, dest_path=dest_path)


def _strip_yaml_header(source: str) -> tuple[str, str]:
    lines = source.split("\n")
    if not lines[0] == "---":
        return "", source
    else:
        counter = 0
        header_lines = []
        for line in lines:
            if counter >= 2:
                break
            if line == "---":
                counter += 1
            else:
                header_lines.append(line)  # type: ignore
        header_linecount = len(header_lines) + 2
        rest_of_lines = lines[header_linecount:]

        header_lines = ["---"] + header_lines + ["---"]
        return "\n".join(header_lines), "\n".join(rest_of_lines)

def main(
    source_path: Path,
    dest_path: Path,
    nomnoml_settings: NomNomlSettings,
) -> None:
    raw_markdown = _read_markdown(source_path)
    yaml_header, stripped_md = _strip_yaml_header(raw_markdown)
    code_blocks = _get_code_blocks(stripped_md)

    nomnoml_blocks = code_blocks.get_nomnoml()
    replacement_md_images = _nomnoml_to_md_images(nomnoml_blocks)

    nomnoml_blocks_w_settings = code_blocks.get_nomnoml_and_apply_settings(
        nomnoml_settings,
    )

    new_md_source = _make_new_markdown_source(
        source=stripped_md,
        replacements=replacement_md_images,
    )

    new_md_source = yaml_header + "\n" + new_md_source

    _write_svg_and_create_pdf(
        md_source=new_md_source,
        nomnoml_blocks=nomnoml_blocks_w_settings,
        dest_path=dest_path,
    )


if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser()
    _ = arg_parser.add_argument("path", help="Path to markdown file.")
    _ = arg_parser.add_argument("dest", help="Destination path for output PDF.")
    _ = arg_parser.add_argument(
        "--settings",
        help="Directives to apply to nomnoml diagrams",
        default=DEFAULT_NOMNOML_SETTINGS,
    )
    args = arg_parser.parse_args()
    main(
        source_path=Path(args.path),
        dest_path=Path(args.dest),
        nomnoml_settings=args.settings,
    )
